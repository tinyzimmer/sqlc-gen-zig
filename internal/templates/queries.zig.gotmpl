{{- $conf := .Config -}}
// Generated with sqlc {{ .SQLCVersion }}

const std = @import("std");
const Allocator = std.mem.Allocator;

const pg = @import("{{ .PGImportName }}");

const models = @import("{{ .ModelsFile }}");
{{- if hasEnums .Models }}
const enums = @import("{{ .EnumsFile }}");
{{- end }}

pub const ConnQuerier = Querier(*pg.Conn);
pub const PoolQuerier = Querier(*pg.Pool);

pub fn Querier(comptime T: type) type {
    return struct {
        const Self = @This();
        {{ if not $conf.UnmanagedAllocations }}
        allocator: Allocator,
        {{- end }}
        conn: T,

        pub fn init({{ if not $conf.UnmanagedAllocations }}allocator: Allocator, {{ end }}conn: T) Self {
            return .{ {{ if not $conf.UnmanagedAllocations }}.allocator = allocator, {{ end }}.conn = conn };
        }
        {{ range $query := .Queries }}
        {{ if $conf.PublicQueryStings }}pub {{ end }}const {{ $query.ConstantName }} = 
            {{ multilineStringLiteral $query.SQL 12 }}
        ;
        {{- "\n" -}}
        {{- range $comment := $query.Comments }}
        // {{ $comment }}
        {{- end }}
        
        {{- if hasLocalStructArg $query }}
        {{- range $arg := $query.Args }}
        {{- if $arg.Struct }}
        pub const {{ $arg.Struct.StructName }} = struct {
            {{- range $field := $arg.Struct.Fields }}
            {{ $field.Name }}: {{ if $field.Nullable }}?{{ end }}{{ if $field.Array }}[]{{ end }}{{ $field.ZigType }}{{ if $field.Nullable }} = null{{ end }},
            {{- end }}
        };
        {{- "\n" -}}
        {{- end }}
        {{- end }}
        {{- end }}

        {{- if and (and $query.Ret $query.Ret.Struct) $query.Ret.Emit }}
        pub const {{ $query.Ret.Struct.StructName }} = struct {
            {{- if hasNonScalarFields $query.Ret.Struct }}
            __allocator: Allocator,
            {{- "\n" -}}
            {{- end }}
            {{- range $field := $query.Ret.Struct.Fields }}
            {{ $field.Name }}: {{ if $field.Nullable }}?{{ end }}{{ if $field.Array }}[]{{ end }}{{ $field.ZigType }}{{ if $field.Nullable }} = null{{ end }},
            {{- end }}

            {{- if hasNonScalarFields $query.Ret.Struct }}
            {{- "\n" }}
            pub fn deinit(self: *const {{ $query.Ret.Struct.StructName }}) void {
                {{- range $field := $query.Ret.Struct.Fields }}
                {{- if isNonScalar $field }}
                {{- if $field.Nullable }}
                if (self.{{ $field.Name }}) |field| {
                    {{- if eq $field.ZigType "pg.Cidr" }}
                    self.__allocator.free(field.address);
                    {{- else if eq $field.ZigType "pg.Numeric" }}
                    self.__allocator.free(field.digits);
                    {{- else }}
                    self.__allocator.free(field);
                    {{- end }}
                }
                {{- else }}
                {{- if eq $field.ZigType "pg.Cidr" }}
                self.__allocator.free(self.{{ $field.Name }}.address);
                {{- else if eq $field.ZigType "pg.Numeric" }}
                self.__allocator.free(self.{{ $field.Name }}.digits);
                {{- else }}
                self.__allocator.free(self.{{ $field.Name }});
                {{- end }}
                {{- end }}
                {{- end }}
                {{- end }}
            }
            {{- end }}
        };
        {{- "\n" -}}
        {{- end }}

        {{- if $conf.UseCallbacks }}
        pub fn {{ $query.MethodName }}({{ queryFuncArgs $conf $query }}{{ if not (isExecQuery $query) }}, comptime cb: (fn (val: {{ queryReturnType $query }}) anyerror!void){{ end }}) !void {
        {{- else }}
        pub fn {{ $query.MethodName }}({{ queryFuncArgs $conf $query }}) !{{ if isManyQuery $query }}[]{{ end }}{{ queryReturnType $query }} {
        {{- end }}
            {{- if and $query.RequiresAllocations (not $conf.UnmanagedAllocations) }}
            const allocator = self.allocator;
            {{- end }}
            {{- if isExecQuery $query }}
            _ = try self.conn.exec({{ $query.ConstantName }}, .{ {{- if not $query.Args -}} });{{- else }}
                {{ queryExecParams $query 16 }} 
            });
            {{- end -}}
            {{- else }}
            const result = try self.conn.query({{ $query.ConstantName }}, .{ {{- if not $query.Args -}} });{{- else }}
                {{ queryExecParams $query 16 }} 
            });
            {{- end  }}
            defer result.deinit();
            {{- end -}}

            {{- if isManyQuery $query }}
            {{- "\n" }}
            {{- include "scanManyQuery" $query | indent 12 }}
            {{- else if isOneQuery $query }}
            {{- "\n" }}
            {{- include "scanOneQuery" $query | indent 12 }}
            {{- end }}
        }
        {{- "\n" -}}
        {{- end }}
    };
}
