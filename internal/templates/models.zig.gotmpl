{{- $conf := .Config -}}
// Generated with sqlc {{ .SQLCVersion }}
 
const std = @import("std");
const Allocator = std.mem.Allocator;

{{ if hasPgTypes .Models -}}
const pg = @import("{{ .PGImportName }}");
{{ end }}
{{ if hasEnums .Models -}}
const enums = @import("{{ .EnumsFile }}");
{{ end -}}

{{ range $model := .Models }}
{{- if $model.Comment }}
// {{ $model.Comment }}
{{- end }}
pub const {{ $model.StructName }} = struct {
    {{- if and (hasNonScalarFields $model) (not $conf.UseContext) }}
    __allocator: Allocator,
    {{- "\n" -}}
    {{- end }}
    {{- range $field := $model.Fields }}
    {{- if $field.Comment }}
    // {{ $field.Comment }}
    {{- end }}
    {{- if $conf.UseContext }}
    {{ $field.Name }}: {{ if $field.Nullable }}?{{ end }}{{ if $field.Array }}*pg.Iterator({{ end }}{{ if and (isEnum $field) $field.Array }}[]const u8{{ else }}{{ $field.ZigType }}{{ end }}{{ if $field.Array }}){{ end }},
    {{- else }}
    {{ $field.Name }}: {{ if $field.Nullable }}?{{ end }}{{ if $field.Array }}[]{{ if and (isEnum $field) $field.Array }}const {{ end }}{{ end }}{{ $field.ZigType }}{{ if $field.Nullable }} = null{{ end }},
    {{- end }}
    {{- end }}

    {{- if and (hasNonScalarFields $model) (not $conf.UseContext) }}
    {{- "\n" }}
    pub fn deinit(self: *const {{ $model.StructName }}) void {
        {{- range $field := $model.Fields }}
        
        {{- if $field.Array }}

        {{- if isNonScalar $field }}
        {{- if $field.Nullable }}
        if (self.{{ $field.Name }}) |field| {
            for (self.{{ $field.Name }}) |item| {
                {{- if eq $field.ZigType "pg.Cidr" }}
                self.__allocator.free(item.address);
                {{- else if eq $field.ZigType "pg.Numeric" }}
                self.__allocator.free(item.digits);
                {{- else }}
                self.__allocator.free(item);
                {{- end }}
            }
        }
        {{- else }}
        for (self.{{ $field.Name }}) |item| {
            {{- if eq $field.ZigType "pg.Cidr" }}
            self.__allocator.free(item.address);
            {{- else if eq $field.ZigType "pg.Numeric" }}
            self.__allocator.free(item.digits);
            {{- else }}
            self.__allocator.free(item);
            {{- end }}
        }
        {{- end }}
        {{- end }}
        self.__allocator.free(self.{{ $field.Name }});
        
        {{- else if isNonScalar $field }}
        
        {{- if $field.Nullable }}
        if (self.{{ $field.Name }}) |field| {
            {{- if eq $field.ZigType "pg.Cidr" }}
            self.__allocator.free(field.address);
            {{- else if eq $field.ZigType "pg.Numeric" }}
            self.__allocator.free(field.digits);
            {{- else }}
            self.__allocator.free(field);
            {{- end }}
        }
        {{- else }}
        {{- if eq $field.ZigType "pg.Cidr" }}
        self.__allocator.free(self.{{ $field.Name }}.address);
        {{- else if eq $field.ZigType "pg.Numeric" }}
        self.__allocator.free(self.{{ $field.Name }}.digits);
        {{- else }}
        self.__allocator.free(self.{{ $field.Name }});
        {{- end }}
        {{- end }}

        {{- end }}
        {{- end }}
    }
    {{- end }}
};
{{ end }}