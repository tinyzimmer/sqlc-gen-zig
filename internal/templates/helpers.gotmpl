{{/* Scans a single row Query object without allocations and invokes a callback */}}
{{- define "scanOneQueryCallback" -}}
{{- $query := .Query -}}
{{- $conf := .Config -}}
const row = try result.next() orelse return error.NotFound;
{{- "\n" }}
{{- if $query.Ret.Struct }}
{{- range $idx, $field := $query.Ret.Struct.Fields }}
{{ include "scanNoAlloc" . }}
{{- end }}
{{- if $conf.PGErrorUnions }}
try ctx.handle(.{
    .{{ queryReturnID $conf $query }} = .{
        {{- range $idx, $field := $query.Ret.Struct.Fields }}
        .{{ $field.Name }} = {{ if $field.Array }}&{{ end }}row_{{ $field.Name }},
        {{- end }}
    },
});
{{- else }}
try ctx.handle(.{
    {{- range $idx, $field := $query.Ret.Struct.Fields }}
    .{{ $field.Name }} = {{ if $field.Array }}&{{ end }}row_{{ $field.Name }},
    {{- end }}
});
{{- end }}
{{- else }}
{{ include "scanNoAlloc" $query.Ret.Field }}
{{- if $conf.PGErrorUnions }}
try ctx.handle(.{
    .{{ queryReturnID $conf $query }} = {{ if $query.Ret.Field.Array }}&{{ end }}row_{{ $query.Ret.Field.Name }},
});
{{- else }}
try ctx.handle({{ if $query.Ret.Field.Array }}&{{ end }}row_{{ $query.Ret.Field.Name }});
{{- end }}
{{- end }}
{{- end -}}

{{/* Scans a many row Query object without allocations and invokes a callback */}}
{{- define "scanManyQueryCallback" -}}
{{- $query := .Query -}}
{{- $conf := .Config -}}
while (try result.next()) |row| {
    {{- if $query.Ret.Struct }}
    {{- range $idx, $field := $query.Ret.Struct.Fields }}
    {{ include "scanNoAlloc" . }}
    {{- end }}
    {{- if $conf.PGErrorUnions }}
    try ctx.handle(.{
        .{{ queryReturnID $conf $query }} = .{
            {{- range $idx, $field := $query.Ret.Struct.Fields }}
            .{{ $field.Name }} = {{ if $field.Array }}&{{ end }}row_{{ $field.Name }},
            {{- end }}
        },
    });
    {{- else }}
    try ctx.handle(.{
        {{- range $idx, $field := $query.Ret.Struct.Fields }}
        .{{ $field.Name }} = {{ if $field.Array }}&{{ end }}row_{{ $field.Name }},
        {{- end }}
    });
    {{- end }}
    {{- else }}
    {{ include "scanNoAlloc" $query.Ret.Field }}
    {{- if $conf.PGErrorUnions }}
    try ctx.handle(.{
        .{{ queryReturnID $conf $query }} = {{ if $query.Ret.Field.Array }}&{{ end }}row_{{ $query.Ret.Field.Name }},
    });
    {{- else }}
    try ctx.handle({{ if $query.Ret.Field.Array }}&{{ end }}row_{{ $query.Ret.Field.Name }});
    {{- end }}
    {{- end }}
}
{{- end -}}

{{/* Scans a single row Query object and returns the value */}}
{{- define "scanOneQueryAlloc" -}}
{{- $query := .Query -}}
{{- $conf := .Config -}}
const row = try result.next() orelse return error.NotFound;
{{- "\n" }}
{{- include "scanRowAlloc" $query -}}
{{- "\n" }}
{{- if $query.Ret.Struct }}
{{- if $conf.PGErrorUnions }}
return .{
    .{{ queryReturnID $conf $query }} = .{
        {{- if hasNonScalarFields $query.Ret.Struct }}
        .__allocator = allocator,
        {{- end }}
        {{- range $idx, $field := $query.Ret.Struct.Fields }}
        .{{ $field.Name }} = {{ if $field.Array}}try {{ end }}row_{{ $field.Name }}{{ if $field.Array}}.toOwnedSlice(){{ end }},
        {{- end }}
    }
};
{{- else }}
return .{
    {{- if hasNonScalarFields $query.Ret.Struct }}
    .__allocator = allocator,
    {{- end }}
    {{- range $idx, $field := $query.Ret.Struct.Fields }}
    .{{ $field.Name }} = {{ if $field.Array}}try {{ end }}row_{{ $field.Name }}{{ if $field.Array}}.toOwnedSlice(){{ end }},
    {{- end }}
};
{{- end }}
{{- else }}
return {{ if $conf.PGErrorUnions }}.{ .{{ queryReturnID $conf $query }} = row_{{ $query.Ret.Field.Name }}}{{ else }}row_{{ $query.Ret.Field.Name }}{{ end }};
{{- end }}
{{- end -}}

{{/* Scans a many row Query object and returns the value as an owned slice */}}
{{- define "scanManyQueryAlloc" -}}
{{- $query := .Query -}}
{{- $conf := .Config -}}
var out = std.ArrayList({{ queryReturnType $query }}).init(allocator);
defer out.deinit();
while (try result.next()) |row| {
    {{- include "scanRowAlloc" $query | indent 4 -}}
    {{- if $query.Ret.Struct }}
    try out.append(.{
        {{- if hasNonScalarFields $query.Ret.Struct }}
        .__allocator = allocator,
        {{- end }}
        {{- range $idx, $field := $query.Ret.Struct.Fields }}
        .{{ $field.Name }} = {{ if $field.Array}}try {{ end }}row_{{ $field.Name }}{{ if $field.Array}}.toOwnedSlice(){{ end }},
        {{- end }}
    });
    {{- else }}
    try out.append(row_{{ $query.Ret.Field.Name }});
    {{- end }}
}
{{- "\n" }}
{{- if $conf.PGErrorUnions }}
return .{
    .{{ queryReturnID $conf $query }} = try out.toOwnedSlice(),
};
{{- else }}
return try out.toOwnedSlice();
{{- end }}
{{- end -}}

{{/* Scans a single row in a Query */}}
{{- define "scanRowAlloc" -}}
{{- if .Ret.Struct }}
{{- range $idx, $field := .Ret.Struct.Fields }}
{{- include "scanValueAlloc" . -}}
{{- end }}
{{- else }}
{{- include "scanValueAlloc" .Ret.Field -}}
{{- end -}}
{{- end -}}

{{/* Scans a single Field object from a query */}}
{{- define "scanValueAlloc" -}}
{{- if .Array }}
var row_{{ .Name }} = std.ArrayList({{ .ZigID }}).init(allocator);
defer row_{{ .Name }}.deinit();
var row_{{ .Name }}_iter = row.get(pg.Iterator({{ if .Enum }}[]const u8{{ else }}{{ fieldScanType . }}{{ end }}), {{ .Index }});
while (row_{{ .Name }}_iter.next()) |item| {
    {{- if .Enum }}
    try row_{{ .Name }}.append(std.meta.stringToEnum({{ .ZigID }}, item) orelse unreachable);
    {{- else if eq .ZigType "pg.Cidr" }}
    const address = try allocator.dupe(u8, item.address);
    errdefer allocator.free(address);
    try row_{{ .Name }}.append(pg.Cidr{
        .address = address,
        .netmask = item.netmask,
        .family = item.family,
    });
    {{- else if eq .ZigType "pg.Numeric" }}
    const digits = try allocator.dupe(u8, item.digits);
    errdefer allocator.free(digits);
    try row_{{ .Name }}.append(pg.Numeric{
        .number_of_digits = item.number_of_digits,
        .weight = item.weight,
        .sign = item.sign,
        .scale = item.scale,
        .digits = digits,
    });
    {{- else if isNonScalar . }}
    const value = try allocator.dupe({{ allocType . }}, item);
    errdefer allocator.free(value);
    try row_{{ .Name }}.append(value);
    {{- else }}
    try row_{{ .Name }}.append(item);
    {{- end }}
}
{{- else if .Enum }}
{{ include "scanNoAlloc" . }}
{{- else if eq .ZigType "pg.Cidr" }}
{{ include "scanPGCidrAlloc" . }}
{{- else if eq .ZigType "pg.Numeric" }}
{{ include "scanPGNumericAlloc" . }}
{{- else if isNonScalar . }}
{{ include "scanNonScalarAlloc" . }}
{{- else }}
{{ include "scanNoAlloc" . }}
{{- end }}
{{- end }}

{{/* Scans a field object without duplicating the value */}}
{{- define "scanNoAlloc" -}}
{{- if .Array -}}
var row_{{ .Name }} = row.get(pg.Iterator({{ if .Enum }}[]const u8{{ else }}{{ fieldScanType . }}{{ end }}), {{ .Index }});
{{- else -}}
const row_{{ .Name }} = row.get({{ fieldScanType . }}, {{ .Index }});
{{- end -}}
{{- end -}}

{{/* Scans a non-scalar Field object */}}
{{- define "scanNonScalarAlloc" -}}
{{- if .Nullable }}
const maybe_{{ .Name }} = row.get(?{{ .ZigType }}, {{ .Index }});
const row_{{ .Name }}: ?{{ .ZigType }} = blk: {
    if (maybe_{{ .Name }}) |field| {
        break :blk try allocator.dupe({{ allocType . }}, field);
    }
    break :blk null;
};
errdefer {
    if (row_{{ .Name }}) |field| {
        allocator.free(field);
    }
}
{{- else -}}
const row_{{ .Name }} = try allocator.dupe({{ allocType . }}, row.get({{ fieldScanType . }}, {{ .Index }}));
errdefer allocator.free(row_{{ .Name }});
{{- end -}}
{{- end -}}

{{/* Scans a pg.Cidr Field object */}}
{{- define "scanPGCidrAlloc" -}}
const {{ .Name }}_cidr = row.get({{ if .Nullable }}?{{ end }}pg.Cidr, {{ .Index }});
{{- if .Nullable }}
const row_{{ .Name }}: ?pg.Cidr = blk: {
    if ({{ .Name }}_cidr) |cidr| {
        break :blk pg.Cidr{
            .address = try allocator.dupe(u8, cidr.address),
            .netmask = cidr.netmask,
            .family = cidr.family,
        };
    }
    break :blk null;
};
errdefer {
    if (row_{{ .Name }}) |cidr| {
        allocator.free(cidr.address);
    }
}
{{- else -}}
const row_{{ .Name }} = pg.Cidr{
    .address = try allocator.dupe(u8, {{ .Name }}_cidr.address),
    .netmask = {{ .Name }}_cidr.netmask,
    .family = {{ .Name }}_cidr.family,
};
errdefer allocator.free(row_{{ .Name }}.address);
{{- end -}}
{{- end -}}

{{/* Scans a pg.Numeric Field object */}}
{{- define "scanPGNumericAlloc" -}}
const {{ .Name }}_numeric = row.get({{ if .Nullable }}?{{ end }}pg.Numeric, {{ .Index }});
{{- if .Nullable }}
const row_{{ .Name }}: ?pg.Numeric = blk: {
    if ({{ .Name }}_numeric) |numeric| {
        break :blk pg.Numeric{
            .number_of_digits = numeric.number_of_digits,
            .weight = numeric.weight,
            .sign = numeric.sign,
            .scale = numeric.scale,
            .digits = try allocator.dupe(u8, numeric.digits),
        };
    }
    break :blk null;
};
errdefer {
    if (row_{{ .Name }}) |numeric| {
        allocator.free(numeric.digits);
    }
}
{{- else -}}
const row_{{ .Name }} = pg.Numeric{
    .number_of_digits = {{ .Name }}_numeric.number_of_digits,
    .weight = {{ .Name }}_numeric.weight,
    .sign = {{ .Name }}_numeric.sign,
    .scale = {{ .Name }}_numeric.scale,
    .digits = try allocator.dupe(u8, {{ .Name }}_numeric.digits),
};
errdefer allocator.free(row_{{ .Name }}.digits);
{{- end -}}
{{- end -}}
