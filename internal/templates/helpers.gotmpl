{{- define "scanOneQuery" -}}
const row = try result.next() orelse return error.NotFound;
{{- "\n" }}
{{- include "scanRow" . -}}
{{- if .Ret.Struct }}
{{- "\n" }}
return .{
    {{- if hasNonScalarFields .Ret.Struct }}
    .__allocator = self.allocator,
    {{- end }}
    {{- range $idx, $field := .Ret.Struct.Fields }}
    .{{ $field.Name }} = {{ if $field.Array}}try{{ end }}row_{{ $field.Name }}{{ if $field.Array}}.toOwnedSlice(){{ end }},
    {{- end }}
};
{{- else }}
return row_{{ .Ret.Field.Name }};
{{- end }}
{{- end -}}

{{- define "scanManyQuery" -}}
var out = std.ArrayList({{ queryReturnType . }}).init(self.allocator);
defer out.deinit();
while (try result.next()) |row| {
    {{- include "scanRow" . | indent 4 -}}
    {{- if .Ret.Struct }}
    try out.append(.{
        {{- if hasNonScalarFields .Ret.Struct }}
        .__allocator = self.allocator,
        {{- end }}
        {{- range $idx, $field := .Ret.Struct.Fields }}
        .{{ $field.Name }} = {{ if $field.Array}}try {{ end }}row_{{ $field.Name }}{{ if $field.Array}}.toOwnedSlice(){{ end }},
        {{- end }}
    });
    {{- else -}}
    try out.append(row_{{ .Ret.Field.Name }});
    {{- end }}
}
return try out.toOwnedSlice();
{{- end -}}

{{- define "scanRow" -}}
{{- if .Ret.Struct }}
{{- range $idx, $field := .Ret.Struct.Fields }}
{{- include "scanValue" . }}
{{- end }}
{{- else }}
{{- include "scanValue" .Ret.Field }}
{{- end -}}
{{- end -}}

{{- define "scanValue" -}}
{{- if .Array }}
const row_{{ .Name }} = std.ArrayList({{ .ZigType }}).init(self.allocator);
defer row_{{ .Name }}.deinit();
const row_{{ .Name }}_iter = row.get(pg.Iterator({{ fieldScanType . }}), {{ .Index }});
while (row_{{ .Name }}_iter.next()) |item| {
    {{- if isEnum . }}
    try row_{{ .Name }}.append(std.meta.stringToEnum({{ .ZigType }}, item) orelse unreachable);
    {{- else if eq .ZigType "pg.Cidr" }}
    const address = try self.allocator.dupe(u8, item.address);
    errdefer self.allocator.free(address);
    try row_{{ .Name }}.append(pg.Cidr{
        .address = address,
        .netmask = item.netmask,
        .family = item.family,
    });
    {{- else if eq .ZigType "pg.Numeric" }}
    const digits = try self.allocator.dupe(u8, item.digits);
    errdefer self.allocator.free(digits);
    try row_{{ .Name }}.append(pg.Numeric{
        .number_of_digits = item.number_of_digits,
        .weight = item.weight,
        .sign = item.sign,
        .scale = item.scale,
        .digits = digits,
    });
    {{- else if isNonScalar . }}
    const value = try self.allocator.dupe({{ allocType . }}, item);
    errdefer self.allocator.free(value);
    try row_{{ .Name }}.append(value);
    {{- else }}
    try row_{{ .Name }}.append(item);
    {{- end }}
}
{{- else if isEnum . }}
{{ include "scanEnum" . }}
{{- else if eq .ZigType "pg.Cidr" }}
{{ include "scanPGCidr" . }}
{{- else if eq .ZigType "pg.Numeric" }}
{{ include "scanPGNumeric" . }}
{{- else if isNonScalar . }}
{{ include "scanNonScalar" . }}
{{- else }}
{{ include "scanScalar" . }}
{{- end }}
{{- end }}

{{- define "scanScalar" -}}
const row_{{ .Name }} = row.get({{ fieldScanType . }}, {{ .Index }});
{{- end -}}

{{- define "scanEnum" -}}
const row_{{ .Name }} = std.meta.stringToEnum({{ .ZigType }}, row.get([]const u8, {{ .Index }})){{ if not .Nullable }} orelse unreachable{{ end }};
{{- end -}}

{{- define "scanNonScalar" -}}
{{- if .Nullable }}
const maybe_{{ .Name }} = row.get(?{{ .ZigType }}, {{ .Index }});
const row_{{ .Name }}: ?{{ .ZigType }} = blk: {
    if (maybe_{{ .Name }}) |field| {
        break :blk try self.allocator.dupe({{ allocType . }}, field);
    }
    break :blk null;
};
errdefer {
    if (row_{{ .Name }}) |field| {
        self.allocator.free(field);
    }
}
{{- else }}
const row_{{ .Name }} = try self.allocator.dupe({{ allocType . }}, row.get({{ fieldScanType . }}, {{ .Index }}));
errdefer self.allocator.free(row_{{ .Name }});
{{- end }}
{{- end -}}

{{- define "scanPGCidr" -}}
const {{ .Name }}_cidr = row.get({{ if .Nullable }}?{{ end }}pg.Cidr, {{ .Index }});
{{- if .Nullable }}
const row_{{ .Name }}: ?pg.Cidr = blk: {
    if ({{ .Name }}_cidr) |cidr| {
        break :blk pg.Cidr{
            .address = try self.allocator.dupe(u8, cidr.address),
            .netmask = cidr.netmask,
            .family = cidr.family,
        };
    }
    break :blk null;
};
errdefer {
    if (row_{{ .Name }}) |cidr| {
        self.allocator.free(cidr.address);
    }
}
{{- else }}
const row_{{ .Name }} = pg.Cidr{
    .address = try self.allocator.dupe(u8, {{ .Name }}_cidr.address),
    .netmask = {{ .Name }}_cidr.netmask,
    .family = {{ .Name }}_cidr.family,
};
errdefer self.allocator.free(row_{{ .Name }}.address);
{{- end }}
{{- end -}}

{{- define "scanPGNumeric" -}}
const {{ .Name }}_numeric = row.get({{ if .Nullable }}?{{ end }}pg.Numeric, {{ .Index }});
{{- if .Nullable }}
const row_{{ .Name }}: ?pg.Numeric = blk: {
    if ({{ .Name }}_numeric) |numeric| {
        break :blk pg.Numeric{
            .number_of_digits = numeric.number_of_digits,
            .weight = numeric.weight,
            .sign = numeric.sign,
            .scale = numeric.scale,
            .digits = try self.allocator.dupe(u8, numeric.digits),
        };
    }
    break :blk null;
};
errdefer {
    if (row_{{ .Name }}) |numeric| {
        self.allocator.free(numeric.digits);
    }
}
{{- else }}
const row_{{ .Name }} = pg.Numeric{
    .number_of_digits = {{ .Name }}_numeric.number_of_digits,
    .weight = {{ .Name }}_numeric.weight,
    .sign = {{ .Name }}_numeric.sign,
    .scale = {{ .Name }}_numeric.scale,
    .digits = try self.allocator.dupe(u8, {{ .Name }}_numeric.digits),
};
errdefer self.allocator.free(row_{{ .Name }}.digits);
{{- end }}
{{- end -}}
