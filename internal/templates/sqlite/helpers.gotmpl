{{/* Scans a single row Query object without allocations and invokes a callback */}}
{{- define "scanOneQueryCallback" -}}
{{- end -}}

{{/* Scans a many row Query object without allocations and invokes a callback */}}
{{- define "scanManyQueryCallback" -}}
{{- end -}}

{{/* Scans a single row Query object and returns the value */}}
{{- define "scanOneQueryAlloc" -}}
{{- $query := .Query -}}
{{- $conf := .Config -}}
if (rows.err) |err| {
    return err;
}
const row = rows.next() orelse return error.NotFound;
{{- "\n" }}
{{- include "scanRowAlloc" $query -}}
{{- "\n" }}
{{- if $query.Ret.Struct }}
return .{
    {{- if hasNonScalarFields $query.Ret.Struct }}
    .__allocator = allocator,
    {{- end }}
    {{- range $idx, $field := $query.Ret.Struct.Fields }}
    .{{ $field.Name }} = row_{{ $field.Name }},
    {{- end }}
};
{{- else }}
return row_{{ $query.Ret.Field.Name }};
{{- end }}
{{- end -}}

{{/* Scans a many row Query object and returns the value as an owned slice */}}
{{- define "scanManyQueryAlloc" -}}
{{- $query := .Query -}}
{{- $conf := .Config -}}
var out = std.ArrayList({{ queryReturnType $query }}).init(allocator);
defer out.deinit();
while (rows.next()) |row| {
    {{- include "scanRowAlloc" $query | indent 4 -}}
    {{- if $query.Ret.Struct }}
    try out.append(.{
        {{- if hasNonScalarFields $query.Ret.Struct }}
        .__allocator = allocator,
        {{- end }}
        {{- range $idx, $field := $query.Ret.Struct.Fields }}
        .{{ $field.Name }} = row_{{ $field.Name }},
        {{- end }}
    });
    {{- else }}
    try out.append(row_{{ $query.Ret.Field.Name }});
    {{- end }}
}
{{- "\n" }}
return try out.toOwnedSlice();
{{- end -}}

{{/* Scans a single row in a Query */}}
{{- define "scanRowAlloc" -}}
{{- if .Ret.Struct }}
{{- range $idx, $field := .Ret.Struct.Fields }}
{{- include "scanValueAlloc" . -}}
{{- end }}
{{- else }}
{{- include "scanValueAlloc" .Ret.Field -}}
{{- end -}}
{{- end -}}

{{/* Scans a single Field object from a query */}}
{{- define "scanValueAlloc" -}}
{{- if isNonScalar . }}
{{ include "scanNonScalarAlloc" . }}
{{- else }}
{{ include "scanNoAlloc" . }}
{{- end }}
{{- end }}

{{/* Scans a field object without duplicating the value */}}
{{- define "scanNoAlloc" -}}
const row_{{ .Name }} = row.{{ fieldScanner . }}({{ .Index }});
{{- end -}}

{{/* Scans a non-scalar Field object */}}
{{- define "scanNonScalarAlloc" -}}
{{- if .Nullable }}
const maybe_{{ .Name }} = row.{{ fieldScanner . }}({{ .Index }});
const row_{{ .Name }}: ?{{ .ZigType }} = blk: {
    if (maybe_{{ .Name }}) |field| {
        break :blk try allocator.dupe({{ allocType . }}, field);
    }
    break :blk null;
};
errdefer if (row_{{ .Name }}) |field| {
    allocator.free(field);
};
{{- else -}}
const row_{{ .Name }} = try allocator.dupe({{ allocType . }}, row.{{ fieldScanner . }}({{ .Index }}));
errdefer allocator.free(row_{{ .Name }});
{{- end -}}
{{- end -}}